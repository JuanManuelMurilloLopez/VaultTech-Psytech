<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Informacion de Familiares</title>
    <!-- GoJs -->
    <script src="https://cdn.jsdelivr.net/npm/gojs@3.0.21/release/go.js"></script>
    <!-- Bootstrap CSS -->
    <link href=
    "https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
    rel="stylesheet">
    <!-- Link css -->
    <link rel="stylesheet" href="/css/psicologos/informacionFamiliar.css">
    <!-- CSS navside -->
    <link rel="stylesheet" href="/css/includeCss/_navsidePsicologo.css">
    <!-- CSS cerrar sesión -->
    <link rel="stylesheet" href="/css/includeCss/_buttonCerrarSesion.css">
</head>
<body>

    <div class="main">

        <!-- Navside -->
        <%- include('../includes/_navsidePsicologo.ejs') %>

        <div class="container">

            <!-- Boton de cerrar sesión -->
            <%- include('../includes/_buttonCerrarSesion.ejs') %>

            <h3 class="text-center">INFORMACION FAMILIAR</h3><br>

            <div id="myDiagramDiv" class="p-4 w-full family-container"></div>

            <div class="fixed-bottom-buttons">
                <div class="container">
                    <div class="row gx-3 mt-4 mb-3">
                        <div class="col-md-6">
                            <a href="#" 
                            class="btn btn-color--third">Regresar</a>
                        </div>
    
                        <div class="col-md-6 text-end">
                            <a href="#" 
                            class="btn btn-color--secondary">Imprimir</a>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>

    <script id="code">

        const familyNodes = <%- JSON.stringify(informacionFamiliar.nodos) %>;
        const familyLinks = <%- JSON.stringify(informacionFamiliar.links) %>;

        const nameProperty = 'name';
        const genderProperty = 'gender';
        const maritalStatusProperty = 'maritalStatus';
        const lifeStatusProperty = 'lifeStatus';

        const theme = {
            colors: {
                femaleBadgeBackground: '#FFD9FE',
                maleBadgeBackground: '#C2EBF3',
                nonBinaryBadgeBackground: '#FFF9D4',
                genderFluidBadgeBackground: '#D2D3FF',
                notApplicableBadgeBackground: '#E6E6E6',
                femaleBadgeText: '#8F049B',
                maleBadgeText: '#294969',
                nonBinaryBadgeText: '#E29A00',
                genderFluidBadgeText: '#5202A7',
                notApplicableBadgeText: '#646464' ,
                liveBorder: '#317F43',
                deadBorder: '#B00000',
                personText: '#383838',
                personNodeBackground: '#FFFFFF',
                selectionStroke: '#485670',
                counterBackground: '#485670',
                counterBorder: '#FFFFFF',
                counterText: '#FFFFFF',
                link: '#686E76'
            },
            fonts: {
                badgeFont: 'bold 14px Lato',
                rolFont: 'bold 14px Lato',
                nameFont: '500 12px Lato',
                counterFont: '14px Lato'
            }
        };

        const onMouseEnterPart = (e, part) => part.isHighlighted = true;
        const onMouseLeavePart = (e, part) => { if (!part.isSelected) part.isHighlighted = false; }
        const onSelectionChange = (part) => { part.isHighlighted = part.isSelected; }

        const STROKE_WIDTH = 3;
        const ADORNMENT_STROKE_WIDTH = STROKE_WIDTH + 1;
        const CORNER_ROUNDNESS = 12;
        const IMAGE_TOP_MARGIN = 20;
        const MAIN_SHAPE_NAME = 'mainShape';
        const IMAGE_DIAMETER = 40;

        const getStrokeForLifeStatus = (lifeStatus) => {
            if(lifeStatus == 'Vivo')
                return theme.colors.liveBorder;
            else
                return theme.colors.deadBorder;
        };

        function strokeStyle(shape){
            return shape
                .set({
                    fill: theme.colors.personNodeBackground,
                    strokeWidth: STROKE_WIDTH
                })
                .bind('stroke', lifeStatusProperty, lifeStatus => getStrokeForLifeStatus(lifeStatus))
                .bindObject('stroke', 'isHighlighted', (isHighlighted, obj) => 
                    isHighlighted
                        ? theme.colors.selectionStroke
                        : getStrokeForLifeStatus(obj.part.data.lifeStatus))
        }

        const genderMap = {
            1: "Femenino",
            2: "Masculino",
            3: "No Binario",
            4: "Género fluido",
            5: "Prefiero no decir"
        };

        const genderTextColorMap = {
            1: theme.colors.femaleBadgeText,
            2: theme.colors.maleBadgeText,
            3: theme.colors.nonBinaryBadgeText,
            4: theme.colors.genderFluidBadgeText,
            5: theme.colors.notApplicableBadgeText
        };

        const genderFillColorMap = {
            1: theme.colors.femaleBadgeBackground,
            2: theme.colors.maleBadgeBackground,
            3: theme.colors.nonBinaryBadgeBackground,
            4: theme.colors.genderFluidBadgeBackground,
            5: theme.colors.notApplicableBadgeBackground    
        };

        const maritalStatusMap = {
            1: "Soltero",
            2: "Casado",
            3: "Divorciado",
            4: "Unión libre",
            5: "Viudo"
        };

        const genderToText = (gender) => genderMap[gender] || "Desconocido";
        const genderToTextColor = (gender) => genderTextColorMap[gender] || "#000";
        const genderToFillColor = (gender) => genderFillColorMap[gender] || "#FFF";

        const maritalStatusToText = (maritalStatus) => 
            maritalStatusMap[maritalStatus] || "Desconocido";

        function initDiagram() {
            const $ = go.GraphObject.make;

            const diagram = new go.Diagram("myDiagramDiv", {
                layout: $(go.LayeredDigraphLayout, {
                    direction: 90,
                    columnSpacing: 40,
                    layerSpacing: 60,
                    setsPortSpots: false,
                    packOption: go.LayeredDigraphLayout.PackAll,
                    aggressiveOption: go.LayeredDigraphLayout.AggressiveMore,
                    alignOption: go.LayeredDigraphLayout.AlignCenter,
                    cycleRemoveOption: go.LayeredDigraphLayout.CycleDepthFirst,
                    initializeOption: go.LayeredDigraphLayout.InitDepthFirstOut
                }),
                'toolManager.hoverDelay': 100,
                "undoManager.isEnabled": true
            });
        

            const personBadge = () =>
                new go.Panel('Auto', {
                    alignmentFocus: go.Spot.TopRight,
                    alignment: new go.Spot(1, 0, -25, STROKE_WIDTH - 0.5)
                })
                    .add(
                        new go.Shape({
                            figure: 'RoundedRectangle',
                            parameter1: CORNER_ROUNDNESS,
                            parameter2: 4 | 8,
                            desiredSize: new go.Size(NaN, 22.5),
                            stroke: null
                        })
                            .bind('fill', genderProperty, genderToFillColor),
                    new go.TextBlock({
                        font: theme.fonts.badgeFont,
                        margin: new go.Margin(3, 8, 3, 8)
                    })
                        .bind('stroke', genderProperty, genderToTextColor)
                        .bind('text', genderProperty, genderToText)
                    );
            
            const personCounter = () =>
                new go.Panel('Auto', {
                    visible: false,
                    alignmentFocus: go.Spot.Center,
                    alignment: go.Spot.Bottom
                })
                    .bindObject('visible', '', (obj) => obj.findLinksOutOf().count > 0)
                    .add(
                        new go.Shape('Circle', {
                        desiredSize: new go.Size(35, 35),
                        strokeWidth: STROKE_WIDTH,
                        stroke: theme.colors.counterBorder,
                        fill: theme.colors.counterBackground
                    }),
                        new go.TextBlock({
                        alignment: new go.Spot(0.5, 0.5, 0, 1),
                        stroke: theme.colors.counterText,
                        font: theme.fonts.counterFont,
                        textAlign: 'center'
                    })
                        .bindObject('text', '', (obj) => obj.findNodesOutOf().count)
            )

            function pictureStyle(pic) {
                return pic
                .bind('source', genderProperty, (gender) => {
                    // Cambiado para usar códigos numéricos en lugar de texto
                    switch (gender) {
                    case 1: // Femenino
                        return '/images/female.svg';
                    case 2: // Masculino
                        return '/images/male.svg';
                    case 3: // No binario
                        return '/images/male.svg';
                    case 4: // Género fluido
                        return '/images/male.svg';
                    case 5: // Prefiero no decir
                        return '/images/male.svg';
                    default:
                        return '/images/male.svg';
                    }
                });
            }

            const personImage = () =>
                new go.Panel('Spot', {
                    alignmentFocus: go.Spot.Top,
                    alignment: new go.Spot(0, 0, STROKE_WIDTH / 2, IMAGE_TOP_MARGIN)
                })
                    .add(
                        new go.Shape({
                        figure: 'Circle',
                        desiredSize: new go.Size(IMAGE_DIAMETER, IMAGE_DIAMETER)
                        })
                        .apply(strokeStyle),
                        new go.Picture({ scale: 0.9 })
                        .apply(pictureStyle)
                    );

            const personMainShape = () =>
                new go.Shape({
                    figure: 'RoundedRectangle',
                    desiredSize: new go.Size(215, 110),
                    portId: '',
                    parameter1: CORNER_ROUNDNESS
                })
                    .apply(strokeStyle);

            const personNameTextBlock = () =>
                new go.TextBlock({
                    stroke: theme.colors.personText,
                    font: theme.fonts.nameFont,
                    desiredSize: new go.Size(160, 50),
                    overflow: go.TextOverflow.Ellipsis,
                    textAlign: 'center',
                    verticalAlignment: go.Spot.Center,
                    toolTip: $(go.Adornment, "Auto")
                        .add($(go.Shape, { fill: "#FFFFCC" }))
                        .add($(go.TextBlock, { margin: 4 })
                            .bind("text", nameProperty)),
                    alignmentFocus: go.Spot.Top,
                    alignment: new go.Spot(0.5, 0, 0, 25)
                })
                    .bind('text', nameProperty);

            const personRoleTextBlock = () => 
                new go.TextBlock({
                    stroke: theme.colors.personText,
                    font: theme.fonts.rolFont,
                    textAlign: 'center',
                    verticalAlignment: go.Spot.Bottom,
                    alignmentFocus: go.Spot.Bottom,
                    alignment: new go.Spot(0.5, 1, 0, -15)
                })
                    .bind('text', 'rol');

            diagram.nodeTemplate = $(go.Node, "Spot", {
                selectionAdorned: false,
                mouseEnter: onMouseEnterPart,
                mouseLeave: onMouseLeavePart,
                selectionChanged: onSelectionChange
            })
                .add(
                    $(go.Panel, "Spot")
                    .add(
                        personMainShape(),
                        personNameTextBlock(),
                        personRoleTextBlock()
                    ),
                    personImage(),
                    personBadge(),
                    personCounter()
                );

            diagram.linkTemplate = $(go.Link, {
                selectionAdorned: false,
                routing: go.Link.Orthogonal,
                corner: 15,
                curve: go.Link.JumpOver,
                adjusting: go.Link.End,
                reshapable: true,
                relinkableFrom: false,
                relinkableTo: false,
                layerName: 'Background',
                mouseEnter: onMouseEnterPart,
                mouseLeave: onMouseLeavePart,
                corner: 4
            })
                .add(
                    $(go.Shape, {
                        stroke: theme.colors.link,
                        strokeWidth: 1.5
                    })
                    .bindObject('stroke', 'isHighlighted', (isHighlighted) =>
                        isHighlighted ? theme.colors.selectionStroke : theme.colors.link
                    )
                    .bindObject('stroke', 'isSelected', (selected) =>
                        selected ? theme.colors.selectionStroke : theme.colors.link
                    )
                    .bindObject('strokeWidth', 'isSelected', (selected) => selected ? 2.5 : 1.5)
                );

            const model = new go.GraphLinksModel({
                nodeDataArray: familyNodes,
                linkDataArray: familyLinks
            });

            diagram.model = model;

            return diagram;
        }

        window.addEventListener('DOMContentLoaded', function() {
            try {
                console.log("Inicializando diagrama con datos de nodos:", familyNodes);
                console.log("Inicializando diagrama con datos de enlaces:", familyLinks);
                const diagram = initDiagram();
                console.log("Diagrama inicializado");
            } catch (e) {
                console.error("Error al inicializar el diagrama:", e);
            }
        });

    </script>

</div>
    
</body>
</html>